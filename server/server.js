const express = require("express");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const mysql = require("mysql2");
require("dotenv").config();
const path = require("path");
const multer = require("multer");
const upload = multer({ dest: "uploads/" }); // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
const XLSX = require("xlsx");

const app = express();
const port = process.env.PORT || 10001;

// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log("DB_HOST:", process.env.DB_HOST);
console.log("DB_USER:", process.env.DB_USER);
console.log("DB_PASSWORD:", process.env.DB_PASSWORD);
console.log("DB_NAME:", process.env.DB_NAME);
console.log("DB_PORT:", process.env.DB_PORT);

app.use(cors({ origin: "*" }));
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = mysql.createPool({
    host: process.env.DB_HOST || "localhost",
    user: process.env.DB_USER || "root",
    password: process.env.DB_PASSWORD || "",
    database: process.env.DB_NAME || "test_db",
    port: process.env.DB_PORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
});

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º pool –≤ Promises API
const db = pool.promise();

const JWT_SECRET = process.env.JWT_SECRET || "secret_key";

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const token = req.header("Authorization")?.split(" ")[1];
    if (!token) return res.status(403).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });

    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });

        req.user = decoded;
        next();
    });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const verifyAdmin = (req, res, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ req.user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —á—Ç–æ isAdmin –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!req.user || (req.user.isAdmin !== 1 && req.user.isAdmin !== 2)) {
        console.log('–î–æ—Å—Ç—É–ø –æ—Ç–∫–∞–∑–∞–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${req.user.isAdmin}`);

    next();
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/register", async (req, res) => {
    const { name, email, password } = req.body;

    if (password.length < 8) {
        return res.status(400).json({ error: "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π" });
    }

    try {
        const [result] = await db.query("SELECT * FROM Holodka WHERE email = ?", [email]);
        if (result.length > 0) {
            return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        await db.query("INSERT INTO Holodka (name, email, password, isAdmin) VALUES (?, ?, ?, 0)", [name, email, password]);
        res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ë–î:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/login", async (req, res) => {
    const { email, password } = req.body;
    console.log("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:");
    console.log("Email:", email); // –õ–æ–≥–∏—Ä—É–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("–ü–∞—Ä–æ–ª—å (–Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å):", password ? "*****" : "–ù–µ—Ç –ø–∞—Ä–æ–ª—è"); // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–≤–∞–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω)

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const [result] = await db.query("SELECT * FROM Holodka WHERE email = ?", [email]);
        if (result.length === 0) {
            console.warn("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω:", email); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const user = result[0];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if (password !== user.password) {
            console.warn("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", email); // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
            return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", email); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ JWT
        const token = jwt.sign(
            { id: user.id, name: user.name, email: user.email, isAdmin: user.isAdmin },
            JWT_SECRET,
            { expiresIn: "6h" }
        );

        res.status(200).json({ token });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


app.post("/submit-form", authenticateToken, async (req, res) => {
    const { fio, phone, dataroz, region, document, message, purchaseType, accountName } = req.body;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.log("üìã –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:");
    console.log("–§–ò–û:", fio);
    console.log("–¢–µ–ª–µ—Ñ–æ–Ω:", phone);
    console.log("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", dataroz);
    console.log("–†–µ–≥–∏–æ–Ω:", region);
    console.log("–î–æ–∫—É–º–µ–Ω—Ç:", document);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ:", message);
    console.log("–¢–∏–ø –ø–æ–∫—É–ø–∫–∏:", purchaseType);
    console.log("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:", accountName);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const currentDate = new Date().toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const userId = req.user.id;

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É Holodka –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [result] = await db.query(
            `
            INSERT INTO Holodka (id, count, data)
            VALUES (?, 1, ?)
            ON DUPLICATE KEY UPDATE
                count = CASE
                    WHEN data = ? THEN count + 1
                    ELSE 1
                END,
                data = ?
            `,
            [userId, currentDate, currentDate, currentDate]
        );

        if (result.affectedRows === 0) {
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É" });
        }

        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");

        res.status(200).json({ message: "–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã" });
    }
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get("/account", authenticateToken, async (req, res) => {
    console.log("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", req.user);

    try {
        const [result] = await db.query("SELECT id, name, email, isAdmin, count, data FROM Holodka WHERE id = ?", [req.user.id]);

        if (result.length === 0) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(result[0]);
    } catch (err) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
app.get("/admin/users", authenticateToken, verifyAdmin, async (req, res) => {
    try {
        const [result] = await db.query("SELECT id, name, email, isAdmin, count, data FROM Holodka");
        res.status(200).json(result);
    } catch (err) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
app.delete("/admin/users/:id", authenticateToken, verifyAdmin, async (req, res) => {
    try {
        await db.query("DELETE FROM Holodka WHERE id = ?", [req.params.id]);
        res.status(200).json({ success: true });
    } catch (err) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const clientPath = path.join(__dirname, "..", "client", "build");
app.use(express.static(clientPath));

app.get("*", (req, res) => {
    res.sendFile(path.join(clientPath, "index.html"));
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put("/users/:id", authenticateToken, async (req, res) => {
    const { name, email } = req.body;
    const userId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!name || !email) {
        return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
    }

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const [result] = await db.query(
            "UPDATE Holodka SET name = ?, email = ? WHERE id = ?",
            [name, email, userId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ë–î:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –û–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.put("/admin/reset-submissions", authenticateToken, verifyAdmin, async (req, res) => {
    try {
        await db.query("UPDATE Holodka SET count = 0");
        res.status(200).json({ message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ –æ–±–Ω—É–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." });
        console.log("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ –æ–±–Ω—É–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–æ–∫" });
    }
});


// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.put("/admin/set-today", authenticateToken, verifyAdmin, async (req, res) => {
    const today = new Date().toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    try {
        await db.query("UPDATE Holodka SET data = ?", [today]);
        res.status(200).json({ message: "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." });
        console.log("‚úÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∞—Ç—ã" });
    }
});

app.post("/leads/upload", authenticateToken, verifyAdmin, upload.single("file"), async (req, res) => {
    try {
        const file = req.file;
        if (!file) return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        const workbook = XLSX.readFile(file.path);
        const sheetName = workbook.SheetNames[0];
        const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
        const leads = data.map((row) => [
            row["–§–ò–û"] || null, // fio
            row["–ù–æ–º–µ—Ä"] || null, // phone
            row["–ü–æ—á—Ç–∞"] || null, // email
            row["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (MM/DD/YYYY)"] || null, // birthdate
            row["–û–ø–µ—Ä–∞—Ç–æ—Ä"] || null, // operator
            row["–†–µ–≥–∏–æ–Ω"] || null, // region
        ]);

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –§–ò–û –∏ –Ω–æ–º–µ—Ä–∞, —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π)
        const filteredLeads = leads.filter((lead) => lead[0] || lead[1]);

        if (filteredLeads.length === 0) {
            return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏." });
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É leads
        const [result] = await db.query(
            "INSERT INTO leads (fio, phone, email, birthdate, operator, region) VALUES ?",
            [filteredLeads]
        );

        res.status(201).json({ message: "–õ–∏–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", inserted: result.affectedRows });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–æ–≤:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤
app.get("/leads", authenticateToken, verifyAdmin, async (req, res) => {
    try {
        const [leads] = await db.query("SELECT * FROM leads");
        res.status(200).json(leads);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post("/leads/assign", authenticateToken, verifyAdmin, async (req, res) => {
    const { leadId, userId } = req.body;
    try {
        const [result] = await db.query(
            "UPDATE leads SET assigned_to = ? WHERE id = ?",
            [userId, leadId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "–õ–∏–¥ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/leads/my", authenticateToken, async (req, res) => {
    try {
        const [leads] = await db.query("SELECT * FROM leads WHERE assigned_to = ?", [req.user.id]);
        res.status(200).json(leads);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –ª–∏–¥–æ–≤:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});




// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});